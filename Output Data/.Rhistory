}
}
if (length(trees) < 2)
trees
else {
## Combine the first two
combined <- makeCodeTree(trees[[1]], trees[[2]])
insert(combined, trees[-(1:2)])
}
}
##
## Create a single codeTree from a list of codeTrees
## Typically arguments is a list of Leaf nodes
## Hint: reduce to a singleton using combine
##
createCodeTree <- function(trees) {
## 4d. Complete the function....
## return a singleton tree
while(length(trees) != 1) {
trees <- combine(trees)
}
trees
## end of 4d.
}
createCodeTree <- function(trees) {
while(length(trees) != 1) {
trees <- combine(trees)
}
trees
}
createCodeTree(helloLeafList)
CodeTree<-createCodeTree(helloLeafList)
CodeTree
library(rgdal)
pullPermits<-function(url,year) {
Permit = readOGR(url, "OGRGeoJSON")
PermitDF<-Permit@data
PermitDF$YEAR<-rep(year,nrow(PermitDF))
Build<-subset(PermitDF,PermitDF$PERMIT_TYPE_NAME=="CONSTRUCTION" & PermitDF$PERMIT_SUBTYPE_NAME=="NEW BUILDING")
}
Build16<-pullPermits("http://opendata.dc.gov/datasets/5d14ae7dcd1544878c54e61edda489c3_24.geojson",2016)
Build15<-pullPermits("http://opendata.dc.gov/datasets/981c105beef74af38cc4090992661264_25.geojson",2015)
Build14<-pullPermits("http://opendata.dc.gov/datasets/d4891ca6951947538f6707a6b07ae225_5.geojson",2014)
Build13<-pullPermits("http://opendata.dc.gov/datasets/4911fcf3527246ae9bf81b5553a48c4d_6.geojson",2013)
Build12<-pullPermits("http://opendata.dc.gov/datasets/5f4ea2f25c9a45b29e15e53072126739_7.geojson",2012)
Build1216<-rbind(Build12,Build13,Build14,Build15,Build16)
View(Build1216)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY | SFD",Build1216$DESC_OF_WORK,"Single Family",NA)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY | SFD",Build1216$DESC_OF_WORK),"Single Family",NA)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY | SFD",Build1216$DESC_OF_WORK),"Single Family",NA)
table(Build1216$PropType)
998/1954
SFD<-subset(Build1216,Build1216$PropType=="Single Family")
View(SFD)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY | SFD",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT | UNIT",Build1216$DESC_OF_WORK),"Multi Family",NA))
table(Build1216$PropType)
(998+270)/1954
NABuild<-subset(Build1216,is.na(Build1216$PropType))
View(NABuild)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY | SFD",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT",Build1216$DESC_OF_WORK),"Multi Family",NA))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
View(NABuild)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY | SFD",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMLIY",Build1216$DESC_OF_WORK),"Multi Family",NA))
table(Build1216$PropType)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY | SFD",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY",Build1216$DESC_OF_WORK),"Multi Family",NA))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
View(NABuild)
View(Build1216)
BuildUnq<-unique(Build1216$FULL_ADDRESS[duplicated(Build1216$FULL_ADDRESS)])
BuildUnq<-as.data.frame(unique(Build1216$FULL_ADDRESS[duplicated(Build1216$FULL_ADDRESS)]))
View(BuildUnq)
BuildDup<-as.data.frame(unique(Build1216$FULL_ADDRESS[duplicated(Build1216$FULL_ADDRESS)]))
colnames(BuildDup)<-c("FULL_ADDRESS")
BuildDup2<-merge(BuildDup, Build1216, by=c("FULL_ADDRESS"),type="left")
View(BuildDup2)
View(BuildDup2)
BuildDup2<-merge(BuildDup, Build1216, by=c("FULL_ADDRESS"),type="left")[1,9:10]
View(BuildDup2)
BuildDup2<-merge(BuildDup, Build1216, by=c("FULL_ADDRESS"),type="left")[c(1,9:10)]
View(BuildDup2)
View(BuildDup)
View(Build1216)
BuildDup2<-merge(BuildDup, Build1216, by=c("FULL_ADDRESS"),type="left")[c(1,4,9:10)]
View(BuildDup2)
View(BuildDup2)
BuildDup2<-BuildDup2[order(BuildDup2$FULL_ADDRESS,BuildDup2$ISSUE_DATE),]
View(BuildDup2)
BuildDup2$count <- with(BuildDup2, ave(FULL_ADDRESS, FULL_ADDRESS, FUN = seq_along))
warnings()
View(BuildDup2)
require(plyr)
ddply(BuildDup2, .(FULL_ADDRESS), mutate, count = length(unique(type)))
install.packages("splitstackshape")
library(splitstackshape)
View(BuildDup2)
getanID(BuildDup2, id.vars = 1)
BuildDup2$Count<-getanID(BuildDup2, id.vars = 1)
View(BuildDup2)
BuildDup2<-BuildDup2[order(BuildDup2$FULL_ADDRESS,BuildDup2$ISSUE_DATE),]
ddply(BuildDup2, .(FULL_ADDRESS), transform, .id = seq_along(FULL_ADDRESS))
View(BuildDup2)
BuildDup2<-merge(BuildDup, Build1216, by=c("FULL_ADDRESS"),type="left")[c(1,4,9:10)]
BuildDup2<-BuildDup2[order(BuildDup2$FULL_ADDRESS,BuildDup2$ISSUE_DATE),]
ddply(BuildDup2, .(FULL_ADDRESS), transform, .id = seq_along(FULL_ADDRESS))
ddply(BuildDup2, .(FULL_ADDRESS), transform, .id = seq_along(BuildDup2$FULL_ADDRESS))
BuildDup2$Count<-ddply(BuildDup2, .(FULL_ADDRESS), transform, .id = seq_along(BuildDup2$FULL_ADDRESS))
View(BuildDup2)
BuildDup2<-merge(BuildDup, Build1216, by=c("FULL_ADDRESS"),type="left")[c(1,4,9:10)]
BuildDup2<-BuildDup2[order(BuildDup2$FULL_ADDRESS,BuildDup2$ISSUE_DATE),]
lowest<-by(BuildDup2, c(BuildDup2$FULL_ADDRESS,BuildDup2$ISSUE_DATE), head, n=1)
lowest<-by(BuildDup2, c(BuildDup2$FULL_ADDRESS), head, n=1)
lowest<-as.data.frame(by(BuildDup2, c(BuildDup2$FULL_ADDRESS), head))
BD2 <- data.table(BuildDup2, key = c('FULL_ADDRESS','ISSUE_DATE'))
View(BD2)
BD<-BD2[unique(BD2[,key(BD2), with = FALSE]), mult = 'first']
View(BD)
BD2 <- data.table(BuildDup2, key = c('FULL_ADDRESS'))
BD<-BD2[unique(BD2[,key(BD2), with = FALSE]), mult = 'first']
View(BD)
View(BD2)
BD<-as.data.frame(unique(Build1216$FULL_ADDRESS[duplicated(Build1216$FULL_ADDRESS)]))
colnames(BD)<-c("FULL_ADDRESS")
BuildDup<-merge(BD, Build1216, by=c("FULL_ADDRESS"),type="left")[c(1,4,9:10)]
BuildDup<-BuildDup[order(BuildDup$FULL_ADDRESS,BuildDup$ISSUE_DATE),]
BD2 <- data.table(BuildDup2, key = c('FULL_ADDRESS'))
BD<-BD2[unique(BD2[,key(BD2), with = FALSE]), mult = 'first']
BuildDup<-merge(BD, Build1216, by=c("FULL_ADDRESS"),type="left")
BuildDup<-BuildDup[order(BuildDup$FULL_ADDRESS,BuildDup$ISSUE_DATE),]
BuildDup<-merge(BD, Build1216, by=c("FULL_ADDRESS"),type="left")
BuildDup<-BuildDup[order(BuildDup$FULL_ADDRESS,BuildDup$ISSUE_DATE),]
View(BuildDup)
library(rgdal)
library(splitstackshape)
###Read in Data###
###Read in Data###
###Read in Data###
pullPermits<-function(url,year) {
Permit = readOGR(url, "OGRGeoJSON")
PermitDF<-Permit@data
PermitDF$YEAR<-rep(year,nrow(PermitDF))
Build<-subset(PermitDF,PermitDF$PERMIT_TYPE_NAME=="CONSTRUCTION" & PermitDF$PERMIT_SUBTYPE_NAME=="NEW BUILDING")
}
Build16<-pullPermits("http://opendata.dc.gov/datasets/5d14ae7dcd1544878c54e61edda489c3_24.geojson",2016)
Build15<-pullPermits("http://opendata.dc.gov/datasets/981c105beef74af38cc4090992661264_25.geojson",2015)
Build14<-pullPermits("http://opendata.dc.gov/datasets/d4891ca6951947538f6707a6b07ae225_5.geojson",2014)
Build13<-pullPermits("http://opendata.dc.gov/datasets/4911fcf3527246ae9bf81b5553a48c4d_6.geojson",2013)
Build12<-pullPermits("http://opendata.dc.gov/datasets/5f4ea2f25c9a45b29e15e53072126739_7.geojson",2012)
Build1216<-rbind(Build12,Build13,Build14,Build15,Build16)
BD<-as.data.frame(unique(Build1216$FULL_ADDRESS[duplicated(Build1216$FULL_ADDRESS)]))
colnames(BD)<-c("FULL_ADDRESS")
BuildDup<-merge(BD, Build1216, by=c("FULL_ADDRESS"),type="left")
BuildDup<-BuildDup[order(BuildDup$FULL_ADDRESS,BuildDup$ISSUE_DATE),]
BD2 <- data.table(BuildDup, key = c('FULL_ADDRESS'))
BD<-BD2[unique(BD2[,key(BD2), with = FALSE]), mult = 'first']
View(BuildDup)
DupAddress<-subset(BuildDup,!(BuildDup$PERMIT_ID %in% BD$PERMIT_ID))
Build1216<-subset(Build1216,!Build1216$PERMIT_ID %in% DupAddress$PERMIT$ID)
Build1216<-subset(Build1216,!(Build1216$PERMIT_ID %in% DupAddress$PERMIT$ID))
Build1216<-subset(Build1216,!(Build1216$PERMIT_ID %in% DupAddress$PERMIT_ID))
rm(BD,BD2BuildDup,DupAddress)
rm(BD,BD2,BuildDup,DupAddress)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY | SFD",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNITS|TWO FAMILY",Build1216$DESC_OF_WORK),"Multi Family",NA))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY | SFD",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY",Build1216$DESC_OF_WORK),"Multi Family",NA))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
Build1216$PropType<-ifelse(grepl("APARTMENT|UNIT|TWO FAMILY",Build1216$DESC_OF_WORK),"Multi Family",
ifelse(grepl("SINGLE FAMILY | SFD | TOWNHOUSE | TOWNHOME",Build1216$DESC_OF_WORK),"Single Family",NA))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
Multi<-subset(Build1216,Build1216$PropType=="Multi Family")
SFD<-subset(Build1216,Build1216$PropType=="Single Family")
View(Multi)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY | SFD",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY",Build1216$DESC_OF_WORK),"Multi Family",NA))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
View(NABuild)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY | SFD",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY",Build1216$DESC_OF_WORK),"Multi Family",NA))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
View(NABuild)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY |SFD",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|MIXED USE",Build1216$DESC_OF_WORK),"Multi Family",NA))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
View(NABuild)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY |SFD",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|MIXED USE|CONDO",Build1216$DESC_OF_WORK),"Multi Family",NA))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
View(NABuild)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY |SFD",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|MIXED USE|CONDO",Build1216$DESC_OF_WORK),"Multi Family",
ifelse(grepl("TOWNHOUSE|TOWNHOME",Build1216$DESC_OF_WORK),"Single Family",NA))
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY |SFD",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|MIXED USE|CONDO",Build1216$DESC_OF_WORK),"Multi Family",
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY |SFD",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|MIXED USE|CONDO",Build1216$DESC_OF_WORK),"Multi Family",
ifelse(grepl("TOWNHOUSE|TOWNHOME",Build1216$DESC_OF_WORK),"Single Family",NA)))
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY |SFD",Build1216$DESC_OF_WORK),"Single Family",
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY |SFD",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|MIXED USE|CONDO",Build1216$DESC_OF_WORK),"Multi Family",
ifelse(grepl("TOWNHOUSE|TOWNHOME",Build1216$DESC_OF_WORK),"Single Family",NA)))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
View(NABuild)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY |SFD|S.F DWELLING",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|MIXED USE|CONDO",Build1216$DESC_OF_WORK),"Multi Family",
ifelse(grepl("TOWNHOUSE|TOWNHOME",Build1216$DESC_OF_WORK),"Single Family",NA)))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
View(NABuild)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY |SFD|S.F DWELLING|SINGLE-FAMILY",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|MIXED USE|CONDO",Build1216$DESC_OF_WORK),"Multi Family",
ifelse(grepl("TOWNHOUSE|TOWNHOME",Build1216$DESC_OF_WORK),"Single Family",NA)))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
View(NABuild)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY |SFD|S.F DWELLING|SINGLE-FAMILY|S.F.D",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|MIXED USE|CONDO",Build1216$DESC_OF_WORK),"Multi Family",
ifelse(grepl("TOWNHOUSE|TOWNHOME",Build1216$DESC_OF_WORK),"Single Family",NA)))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
View(NABuild)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY|SFD|S.F DWELLING|SINGLE-FAMILY|S.F.D|SIGLE FAMILY",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|MIXED USE|CONDO",Build1216$DESC_OF_WORK),"Multi Family",
ifelse(grepl("TOWNHOUSE|TOWNHOME",Build1216$DESC_OF_WORK),"Single Family",NA)))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
View(NABuild)
Build1216$PropType<-ifelse(grepl("SINGLE FAMILY|SFD|S.F DWELLING|SINGLE-FAMILY|S.F.D|SIGLE FAMILY",Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|MIXED USE|CONDO",Build1216$DESC_OF_WORK),"Multi Family",
ifelse(grepl("TOWNHOUSE|TOWNHOME|NEW HOUSE",Build1216$DESC_OF_WORK),"Single Family",NA)))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
View(NABuild)
Build1216$PropType<-ifelse(grepl("SINGLE FAM|SFD|S.F DWELLING|SINGLE-FAMILY|S.F.D|SIGLE FAMILY|ONE FAMILY|SFH",
Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|2 FAMILY|2 FAMILLY|MIXED USE|MIXED-USE|FLAT",Build1216$DESC_OF_WORK))
| grepl("CONDO|MULTI USE|9 STORY RESIDENTIAL BUILDING|DUPLEX|MULTI-FAMILY|MULTIFAMILY",Build1216$DESC_OF_WORK)
| grepl("9-STORY BUILDING FOR FOREIGN|FIVE STORY RESIDENTIAL|NEW 3 STORY BUILDING WITH A ROOF DECK", Build1216$DESC_OF_WORK)
Build1216$DESC_OF_WORK),"Multi Family",
ifelse(grepl("TOWNHOUSE|TOWNHOME|NEW HOUSE|BEDROOM HOUSE|HOME|3 STORY HOUSE|STORY HOUSE|TOWN HOME",Build1216$DESC_OF_WORK)
Build1216$PropType<-ifelse(grepl("SINGLE FAM|SFD|S.F DWELLING|SINGLE-FAMILY|S.F.D|SIGLE FAMILY|ONE FAMILY|SFH",
Build1216$PropType<-ifelse(grepl("SINGLE FAM|SFD|S.F DWELLING|SINGLE-FAMILY|S.F.D|SIGLE FAMILY|ONE FAMILY|SFH",
Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|2 FAMILY|2 FAMILLY|MIXED USE|MIXED-USE|FLAT",Build1216$DESC_OF_WORK))
Build1216$PropType<-ifelse(grepl("SINGLE FAM|SFD|S.F DWELLING|SINGLE-FAMILY|S.F.D|SIGLE FAMILY|ONE FAMILY|SFH",
Build1216$PropType<-ifelse(grepl("SINGLE FAM|SFD|S.F DWELLING|SINGLE-FAMILY|S.F.D|SIGLE FAMILY|ONE FAMILY|SFH",
Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|2 FAMILY|2 FAMILLY|MIXED USE|MIXED-USE|FLAT",Build1216$DESC_OF_WORK)
| grepl("CONDO|MULTI USE|9 STORY RESIDENTIAL BUILDING|DUPLEX|MULTI-FAMILY|MULTIFAMILY",Build1216$DESC_OF_WORK)
| grepl("9-STORY BUILDING FOR FOREIGN|FIVE STORY RESIDENTIAL|NEW 3 STORY BUILDING WITH A ROOF DECK", Build1216$DESC_OF_WORK)
Build1216$DESC_OF_WORK),"Multi Family",
Build1216$PropType<-ifelse(grepl("SINGLE FAM|SFD|S.F DWELLING|SINGLE-FAMILY|S.F.D|SIGLE FAMILY|ONE FAMILY|SFH",
Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|2 FAMILY|2 FAMILLY|MIXED USE|MIXED-USE|FLAT",Build1216$DESC_OF_WORK)
| grepl("CONDO|MULTI USE|9 STORY RESIDENTIAL BUILDING|DUPLEX|MULTI-FAMILY|MULTIFAMILY",Build1216$DESC_OF_WORK)
| grepl("9-STORY BUILDING FOR FOREIGN|FIVE STORY RESIDENTIAL|NEW 3 STORY BUILDING WITH A ROOF DECK", Build1216$DESC_OF_WORK),
Build1216$DESC_OF_WORK),"Multi Family",
ifelse(grepl("TOWNHOUSE|TOWNHOME|NEW HOUSE|BEDROOM HOUSE|HOME|3 STORY HOUSE|STORY HOUSE|TOWN HOME",Build1216$DESC_OF_WORK)
|grepl("TOWN HOUSE|SEMI DETACHED DWELLING|ROW HOME|STORY SEMI DETATCHED HOUSE"),
Build1216$DESC_OF_WORK),"Single Family",NA)))
Build1216$PropType<-ifelse(grepl("SINGLE FAM|SFD|S.F DWELLING|SINGLE-FAMILY|S.F.D|SIGLE FAMILY|ONE FAMILY|SFH",
Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|2 FAMILY|2 FAMILLY|MIXED USE|MIXED-USE|FLAT",Build1216$DESC_OF_WORK)
| grepl("CONDO|MULTI USE|9 STORY RESIDENTIAL BUILDING|DUPLEX|MULTI-FAMILY|MULTIFAMILY",Build1216$DESC_OF_WORK)
| grepl("9-STORY BUILDING FOR FOREIGN|FIVE STORY RESIDENTIAL|NEW 3 STORY BUILDING WITH A ROOF DECK", Build1216$DESC_OF_WORK),
Build1216$DESC_OF_WORK),"Multi Family",
ifelse(grepl("TOWNHOUSE|TOWNHOME|NEW HOUSE|BEDROOM HOUSE|HOME|3 STORY HOUSE|STORY HOUSE|TOWN HOME",Build1216$DESC_OF_WORK)
|grepl("TOWN HOUSE|SEMI DETACHED DWELLING|ROW HOME|STORY SEMI DETATCHED HOUSE",
Build1216$DESC_OF_WORK),"Single Family",NA)))
Build1216$PropType<-ifelse(grepl("SINGLE FAM|SFD|S.F DWELLING|SINGLE-FAMILY|S.F.D|SIGLE FAMILY|ONE FAMILY|SFH",
Build1216$DESC_OF_WORK),"Single Family",
ifelse(grepl("APARTMENT|UNIT|TWO FAMILY|TWO-FAMILY|2 FAMILY|2 FAMILLY|MIXED USE|MIXED-USE|FLAT",Build1216$DESC_OF_WORK)
| grepl("CONDO|MULTI USE|9 STORY RESIDENTIAL BUILDING|DUPLEX|MULTI-FAMILY|MULTIFAMILY",Build1216$DESC_OF_WORK)
| grepl("9-STORY BUILDING FOR FOREIGN|FIVE STORY RESIDENTIAL|NEW 3 STORY BUILDING WITH A ROOF DECK",
Build1216$DESC_OF_WORK),"Multi Family",
ifelse(grepl("TOWNHOUSE|TOWNHOME|NEW HOUSE|BEDROOM HOUSE|HOME|3 STORY HOUSE|STORY HOUSE|TOWN HOME",Build1216$DESC_OF_WORK)
|grepl("TOWN HOUSE|SEMI DETACHED DWELLING|ROW HOME|STORY SEMI DETATCHED HOUSE",
Build1216$DESC_OF_WORK),"Single Family",NA)))
table(Build1216$PropType)
NABuild<-subset(Build1216,is.na(Build1216$PropType))
Multi<-subset(Build1216,Build1216$PropType=="Multi Family")
SFD<-subset(Build1216,Build1216$PropType=="Single Family")
DCSchools<-read.csv("https://raw.githubusercontent.com/codefordc/school-modernization/master/Output%20Data/DCPS_Master_114.csv",
stringsAsFactors=FALSE, strip.white=TRUE)
WardMap = readOGR("http://opendata.dc.gov/datasets/a4442c906559456eb6ef3ea0898fe994_32.geojson", "OGRGeoJSON")
WardMap = readOGR("http://opendata.dc.gov/datasets/a4442c906559456eb6ef3ea0898fe994_32.geojson", "OGRGeoJSON")
WardMap = readOGR("http://opendata.dc.gov/datasets/a4442c906559456eb6ef3ea0898fe994_32.geojson", "OGRGeoJSON")
library(plyr)
View(DCSchools)
WardSchools<-ddply(DCSchools,~Ward,summarise,
AllMajorExp=sum(MajorExp9815),
AllSqFt=sum(totalSQFT),
AllEnroll=sum(Total.Enrolled))
View(WardSchools)
WardSchools<-ddply(DCSchools,~Ward,summarise,
AllMajorExp=sum(MajorExp9815),
AllSqFt=sum(totalSQFT),
AllEnroll=sum(Total.Enrolled),
na.rm=TRUE)
View(WardSchools)
WardSchools<-ddply(DCSchools,~Ward,summarise,
AllMajorExp=sum(MajorExp9815),
AllSqFt=sum(totalSQFT),
AllEnroll=sum(Total.Enrolled),
na.rm=T)
View(WardSchools)
View(DCSchools)
WardSchools<-ddply(DCSchools,~Ward,summarise,
AllMajorExp=sum(MajorExp9815,na.rm=TRUE),
AllSqFt=sum(totalSQFT,na.rm=TRUE),
WardSchools<-ddply(DCSchools,~Ward,summarise,
AllMajorExp=sum(MajorExp9815,na.rm=TRUE),
AllSqFt=sum(totalSQFT,na.rm=TRUE),
AllEnroll=sum(Total.Enrolled,na.rm=TRUE))
))
WardSchools<-ddply(DCSchools,~Ward,summarise,
AllMajorExp=sum(MajorExp9815,na.rm=TRUE),
AllSqFt=sum(totalSQFT,na.rm=TRUE),
AllEnroll=sum(Total.Enrolled,na.rm=TRUE))
View(WardSchools)
WardSchool$SpendPerSqFt<-WardSchool$AllMajorExp/WardSchool$AllSqFt
WardSchools$SpendPerSqFt<-WardSchools$AllMajorExp/WardSchools$AllSqFt
View(WardSchools)
View(WardSchools)
Ward<-as.data.frame(WardMap@data)
View(Ward)
colnames(WardSchool)[1]<-"OBJECT.ID"
colnames(WardSchools)[1]<-"OBJECT.ID"
View(WardSchools)
WardSchoolMap <- merge(WardMap,WardSchools, by="OBJECT.ID", all.x=TRUE)
colnames(WardSchools)[1]<-"OBJECTID"
WardSchoolMap <- merge(WardMap,WardSchools, by="OBJECTID", all.x=TRUE)
setwd("/Users/katerabinowitz/Documents/CodeforDC/school-modernization/Output Data")
writeOGR(WardSchoolMap, 'WardSchoolMap.geojson','WardSchoolMap', driver='GeoJSON',check_exists = FALSE)
ElemMap=readOGR("http://opendata.dc.gov/datasets/3e3c048a3fb348cf934d5b00d1dfcee9_6.geojson","OGRGeoJSON")
ElemMap=readOGR("http://opendata.dc.gov/datasets/3e3c048a3fb348cf934d5b00d1dfcee9_6.geojson","OGRGeoJSON")
ElemMapData<-ElemMap@data
View(ElemMapData)
ElemMapData<-ElemMap@data[c(4:5)]
View(ElemMapData)
View(DCSchools)
ElemData<-DCSchools[c(1,2,28,29)]
View(ElemData)
ElemData<-DCSchools[c(2,3,28,29)]
View(ElemData)
colnames(ElemData)[2]<-c("BLDG_NUM")
Elem<-join(ElemMapData,ElemData,by="BLDG_NUM",type="left")
View(Elem)
MiddleMap=readOGR("http://opendata.dc.gov/datasets/91d7eb9416964c1fb3dc94ceeae6b760_7.geojson","OGRGeoJSON")
MiddleMap=readOGR("http://opendata.dc.gov/datasets/91d7eb9416964c1fb3dc94ceeae6b760_7.geojson","OGRGeoJSON")
HSMap=readOGR("http://opendata.dc.gov/datasets/3f5263d0534a42bd84d245102c8578a9_8.geojson","OGRGeoJson")
HSMap=readOGR("http://opendata.dc.gov/datasets/3f5263d0534a42bd84d245102c8578a9_8.geojson","OGRGeoJson")
HSMap=readOGR("http://opendata.dc.gov/datasets/3f5263d0534a42bd84d245102c8578a9_8.geojson","OGRGeoJson")
HSMap=readOGR("http://opendata.dc.gov/datasets/3f5263d0534a42bd84d245102c8578a9_8.geojson","OGRGeoJson")
SchoolMapData<-DCSchools[c(2,3,28,29)]
colnames(SchoolMapData)[2]<-c("BLDG_NUM")
MiddleMapData<-MiddleMap@data[c(4:5)]
MS<-join(MiddleMapData,SchoolData,by="BLDG_NUM",type="left")
MS<-join(MiddleMapData,SchoolMapData,by="BLDG_NUM",type="left")
View(MS)
HSMap=readOGR("http://opendata.dc.gov/datasets/3f5263d0534a42bd84d245102c8578a9_8.geojson","OGRGeoJson")
HSMap=readOGR("http://opendata.dc.gov/datasets/3f5263d0534a42bd84d245102c8578a9_8.geojson","OGRGeoJson")
HSMap=readOGR("http://opendata.dc.gov/datasets/3f5263d0534a42bd84d245102c8578a9_8.geojson","OGRGeoJson")
View(Elem)
View(SchoolMapData)
SchoolMapData<-SchoolMapData[order(SchoolMapData$School),]
View(SchoolMapData)
View(Elem)
ElemNA<-subset(Elem,is.na(Elem$School))
View(ElemNA)
View(DCSchools)
grepl(ElemNA$SCHOOLNAME,DCSchools$School)
View(ElemNA)
View(DCSchools)
DCSchools<-read.csv("https://github.com/codefordc/school-modernization/blob/master/Output%20Data/DC_Schools_Master_114.csv",
stringsAsFactors=FALSE, strip.white=TRUE)
WardSchools<-ddply(DCSchools,~Ward,summarise,
AllMajorExp=sum(MajorExp9815,na.rm=TRUE),
AllSqFt=sum(totalSQFT,na.rm=TRUE),
AllEnroll=sum(Total.Enrolled,na.rm=TRUE))
DCSchools<-read.csv("https://github.com/codefordc/school-modernization/blob/master/Output%20Data/DC_Schools_Master_114.csv",
stringsAsFactors=FALSE, strip.white=TRUE)
View(DCSchools)
DCSchools<-read.csv("https://raw.githubusercontent.com/codefordc/school-modernization/master/Output%20Data/DC_Schools_Master_114.csv",
stringsAsFactors=FALSE, strip.white=TRUE)
WardSchools<-ddply(DCSchools,~Ward,summarise,
AllMajorExp=sum(MajorExp9815,na.rm=TRUE),
AllSqFt=sum(totalSQFT,na.rm=TRUE),
AllEnroll=sum(Total.Enrolled,na.rm=TRUE))
WardSchools$SpendPerSqFt<-WardSchools$AllMajorExp/WardSchools$AllSqFt
colnames(WardSchools)[1]<-"OBJECTID"
WardSchoolMap <- merge(WardMap,WardSchools, by="OBJECTID", all.x=TRUE)
writeOGR(WardSchoolMap, 'WardSchoolMap.geojson','WardSchoolMap', driver='GeoJSON',check_exists = FALSE)
SchoolMapData<-DCSchools[c(2,3,28,29)]
View(DCSchools)
SchoolMapData<-DCSchools[c(2,3,27,28)]
SchoolMapData<-SchoolMapData[order(SchoolMapData$School),]
colnames(SchoolMapData)[2]<-c("BLDG_NUM")
grepl(ElemNA$SCHOOLNAME,DCSchools$School)
Elem<-join(ElemMapData,ElemData,by="BLDG_NUM",type="left")
ElemNA<-subset(Elem,is.na(Elem$School))
View(Elem)
Elem<-Elem[order(Elem$BLDG_NUM),]
View(Elem)
View(ElemData)
View(DCSchools)
SchoolMapData$SchoolShort<-gsub( " .*$", "", SchoolMapData$School)
View(SchoolMapData)
SchoolMapData$SCHOOLNAME<-gsub( " .*$", "", SchoolMapData$School)
ElemA<-join(ElemNA,SchoolMapData,by="SCHOOLNAME",type="left")
View(ElemA)
View(DCSchools)
View(Elem)
View(SchoolMapData)
View(MS)
View(Elem)
View(SchoolMapData)
View(ElemMapData)
str(Elem)
ElemMapNew=readOGR("http://opendata.dc.gov/datasets/dddddabc2ae24acc82f756c76b81d2ec_19.geojson","OGRGeoJSON")
ElemMapNew=readOGR("http://opendata.dc.gov/datasets/dddddabc2ae24acc82f756c76b81d2ec_19.geojson","OGRGeoJSON")
ElemMapNew=readOGR("http://opendata.dc.gov/datasets/dddddabc2ae24acc82f756c76b81d2ec_19.geojson","OGRGeoJSON")
ElemMapData<-ElemMapNew@data[c(4:5)]
View(ElemMapData)
ElemMapData<-ElemMapNew@data
View(ElemMapData)
View(ElemMapData)
SchoolMapData<-DCSchools[c(2,3,27,28)]
SchoolMapData<-SchoolMapData[order(SchoolMapData$School),]
View(SchoolMapData)
ElemMapData<-ElemMapNew@data
ElemMapData$SCHOOLCODE<-gsub( "dcps_", "", ElemMapData$School)
View(ElemMapData)
ElemMapData$SCHOOLCODE<-gsub( "dcps_", "", ElemMapData$GIS_ID)
View(ElemMapData)
Elem<-join(ElemMapData,ElemData,by="SCHOOLCODE",type="left")
Elem<-join(ElemMapData,SchoolMapData,by="SCHOOLCODE",type="left")
View(Elem)
MiddleMap=readOGR("http://opendata.dc.gov/datasets/60a00fbc7b2c4721bd284addf9123718_17.geojson","OGRGeoJSON")
MiddleMap=readOGR("http://opendata.dc.gov/datasets/60a00fbc7b2c4721bd284addf9123718_17.geojson","OGRGeoJSON")
MiddleMap=readOGR("http://opendata.dc.gov/datasets/60a00fbc7b2c4721bd284addf9123718_17.geojson","OGRGeoJSON")
MiddleMapData<-MiddleMap@data
View(MiddleMapData)
MiddleMapData$SCHOOLCODE<-gsub( "dcps_", "", MiddleMapData$GIS_ID)
MS<-join(MiddleMapData,SchoolMapData,by="SCHOOLCODE",type="left")
View(MS)
HSMap=readOGR("http://opendata.dc.gov/datasets/d2e0486155144b6d8e11e12469a64b1c_15.geojson","OGRGeoJson")
HSMap=readOGR("http://opendata.dc.gov/datasets/d2e0486155144b6d8e11e12469a64b1c_15.geojson","OGRGeoJson")
HSMap=readOGR("http://opendata.dc.gov/datasets/d2e0486155144b6d8e11e12469a64b1c_15.geojson","OGRGeoJson")
HSMap=readOGR("http://opendata.dc.gov/datasets/d2e0486155144b6d8e11e12469a64b1c_15.geojson","OGRGeoJson")
HSMap=readOGR("http://opendata.dc.gov/datasets/d2e0486155144b6d8e11e12469a64b1c_15.geojson","OGRGeoJson")
HSMap=readOGR("http://opendata.dc.gov/datasets/d2e0486155144b6d8e11e12469a64b1c_15.geojson","OGRGeoJson")
View(MS)
ElemNA<-subset(Elem, is.na(Elem$School))
View(ElemNA)
View(SchoolMapData)
SchoolMapData$SCHOOLCODE<-ifelse(SchoolMapData$School=="Eaton Elementary School",232,
ifelse(SchoolMapData$School=="Oyster-Adams Bilingual School (Oyster)",292,
ifelse(SchoolMapData$School=="Langley Education Campus",965,
ifelse(SchoolMapData$School=="Moten Elementary School",285,
ifelse(SchoolMapData$School=="Van Ness ES",972,
ifelse(SchoolMapData$School=="Takoma Education Campus",3241,
SchoolMapData$SCHOOLCODE))))))
Elem<-join(ElemMapData,SchoolMapData,by="SCHOOLCODE",type="left")
ElemNA<-subset(Elem, is.na(Elem$School))
View(ElemNA)
SchoolMapData$SCHOOLCODE<-ifelse(SchoolMapData$School=="Eaton Elementary School",232,
ifelse(SchoolMapData$School=="Oyster-Adams Bilingual School (Oyster)",292,
ifelse(SchoolMapData$School=="Langley Education Campus",965,
ifelse(SchoolMapData$School=="Moten Elementary School",920,
ifelse(SchoolMapData$School=="Van Ness ES",972,
ifelse(SchoolMapData$School=="Takoma Education Campus",3241,
SchoolMapData$SCHOOLCODE))))))
Elem<-join(ElemMapData,SchoolMapData,by="SCHOOLCODE",type="left")
ElemNA<-subset(Elem, is.na(Elem$School))
MSNA<-subset(MS, is.na(MS$School))
View(MSNA)
View(DCSchools)
View(DCSchools)
mac<-subset(DCSchools,grepl("MacFar",DCSchools$School))
SchoolMapData$SCHOOLCODE<-ifelse(SchoolMapData$School=="Brookland MS",975,
ifelse(SchoolMapData$School=="Columbia Heights Education Campus",475,
ifelse(SchoolMapData$School=="Jefferson Middle School",415,
ifelse(SchoolMapData$School=="Oyster-Adams Bilingual School (Adams)",949,
ifelse(SchoolMapData$SCHOOLCODE==435,970,
SchoolMapData$SCHOOLCODE)))))
MS<-join(MiddleMapData,SchoolMapData,by="SCHOOLCODE",type="left")
MSNA<-subset(MS, is.na(MS$School))
HSMap=readOGR("http://opendata.dc.gov/datasets/d2e0486155144b6d8e11e12469a64b1c_15.geojson","OGRGeoJson")
View(MS)
MS<-join(MiddleMapData,SchoolMapData,by="SCHOOLCODE",type="left")[c(5:6,8:9)]
View(MS)
MSMap<-merge(MiddleMap, MS,by="GIS_ID",all.x=TRUE)
writeOGR(MSMap, 'MSMap.geojson','MSMap', driver='GeoJSON',check_exists = FALSE)
View(Elem)
Elem<-join(ElemMapData,SchoolMapData,by="SCHOOLCODE",type="left")[c(5:6,8:9)]
ESMap<-merge(ElemMap,Elem,by="GIS_ID",all.x=TRUE)
writeOGR(ESMap, 'ESMap.geojson','ESMap', driver='GeoJSON',check_exists = FALSE)

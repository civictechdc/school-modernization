ifelse((is.na(Delays$Delay)& Delays$Shuttle==1),40,
ifelse((is.na(Delays$Delay)& Delays$SingleTrack==1),20,
ifelse((is.na(Delays$Delay)& grepl("ignificant delay",Delays$Incident)),40,
ifelse((is.na(Delays$Delay)& grepl("delay",Delays$Incident)),8,
Delays$Delay))))))
NATime<-subset(Delays,is.na(Delays$Delay) & !grepl("xpress",Delays$Incident) & !grepl("eroute",Delays$Incident) & !grepl("hanged to",Delays$Incident))
View(NATime)
count(DelayTime$Delay, c('DelayTime$Yr'))
table(DelayTime$Issue,DelayTime$Yr)
DelayTime<-subset(Delays,!is.na(Delays$Delay))
count(DelayTime$Delay, c('DelayTime$Yr'))
table(DelayTime$Issue,DelayTime$Yr)
table(Delay$Issue,Delay$Yr)
table(Delays$Issue,Delays$Yr)
count(Delays$Delay, c('Delays$Yr'))
table(Delays$Issue,Delays$Yr)
3243-1685
count(Delays$Delay, c('Delays$Yr'))
6781-4885
1558/1896
1896-1558
table(Delays$Issue,Delays$Yr)
table(DelayTime$Issue,DelayTime$Yr)
count(DelayTime$Delay, c('DelayTime$Yr'))
4140-3364
5468-4140
aggregate(Delays$Delay, by=list(Delays$Yr), FUN=sum, na.rm=TRUE)
(45803-34730)/34730
(34730-28444)/28444
aggregate(Delays$Delay, by=list(Delays$Yr,Delays$Month), FUN=sum, na.rm=TRUE)
DelaySums<-Delays[c("Silver","Red","Orange","Blue","Yellow","Green","Delay")]
colSums(DelaySums, na.rm=TRUE)
library(stringr)
library(plyr)
DelayRaw<-read.csv("/Users/katerabinowitz/Documents/DataLensDC/WMATA-Delay/Wmata-Delay/WMATAService.csv",
stringsAsFactors=FALSE, strip.white=TRUE)
DelayRaw<-subset(DelayRaw,grepl('[a-z]',DelayRaw$Incident) & !(grepl('Report Archives',DelayRaw$Incident)))
DelayRaw$LongDay<-gsub("Daily Service Report for ", "",DelayRaw$Date)
Date<-as.data.frame(strsplit(DelayRaw$LongDay,", "))
Date<-as.data.frame(t(Date))
colnames(Date)<-c("Day","MD","Yr")
Delays<-cbind(DelayRaw,Date)
Delays<-subset(Delays,Delays$Incident!="Wednesday November 18, 2014    ")
Delays$DayType<-ifelse(Delays$Day %in% c("Saturday","Sunday"), "Weekend","Weekday")
Delays$Month<-gsub( " .*$", "", Delays$MD)
Delays$Time<-substr(Delays$Incident,1,10)
Delays$Hour<-ifelse(Delays$Time=="\n5 57 p.m.",5,
ifelse(Delays$Time=="\n* 5:00 p.",5,
ifelse(Delays$Time=="\n803 a.m. ",8,
as.numeric(gsub(":.*$","",Delays$Time)))))
Delays<-subset(Delays,!is.na(Delays$Hour) & !(Delays$Month=="December"))
Delays$Hour24<-ifelse((grepl("p",Delays$Time) & Delays$Hour==12),Delays$Hour,
ifelse(grepl("p",Delays$Time),Delays$Hour+12,Delays$Hour))
Delays$TimeGroup<-ifelse(Delays$DayType=="Weekday" & Delays$Hour24 %in% c(6,7,8,9),"Rush",
ifelse(Delays$DayType=="Weekday" & Delays$Hour24 %in% c(16,17,18,19),"Rush",
"Off Rush"))
Delays<-Delays[c(3,5:9,11:12)]
Delays$Suspend<-ifelse(grepl("suspend",Delays$Incident),1,
ifelse(grepl("Suspend",Delays$Incident),1,0))
Delays$Closed<-ifelse(grepl("close",Delays$Incident),1,
ifelse(grepl("Close",Delays$Incident),1,0))
Delays$Offload<-ifelse(grepl("offload",Delays$Incident),1,
ifelse(grepl("Offload",Delays$Incident),1,0))
Delays$Shuttle<-ifelse(grepl("Shuttle",Delays$Incident),1,
ifelse(grepl("shuttle",Delays$Incident),1,0))
Delays$SingleTrack<-ifelse(grepl("ingle",Delays$Incident),1,0)
Delays$Express<-ifelse(grepl("xpress",Delays$Incident),1,0)
Delays$Reroute<-ifelse(grepl("eroute",Delays$Incident),1,
ifelse(grepl("changed to", Delays$Incident),1,0))
#Issue
Delays$Issue<-ifelse(grepl("perational problem",Delays$Incident),"Operational",
ifelse((grepl("maintenance",Delays$Incident) | grepl("unscheduled track work",Delays$Incident) | grepl("late",Delays$Incident) |
grepl("disabled work unit",Delays$Incident)),"Maintenance",
ifelse((grepl("signal problem",Delays$Incident) | grepl("door problem",Delays$Incident) | grepl("equipment problem",Delays$Incident) |
grepl("brake problem",Delays$Incident) | grepl("break problem",Delays$Incident)| grepl("track problem",Delays$Incident) |
grepl("power problem",Delays$Incident) | grepl("switch problem",Delays$Incident) | grepl("mechanical problem",Delays$Incident) |
grepl("escalator",Delays$Incident) | grepl("elevator",Delays$Incident) | grepl("cracked rail",Delays$Incident) |
grepl("cracked third",Delays$Incident)),"Mechnical",
ifelse((grepl("disabled No",Delays$Incident) | grepl("disabled no",Delays$Incident) | grepl("derail",Delays$Incident)),"Trains",
ifelse((grepl("fire",Delays$Incident) | grepl("smoke",Delays$Incident) | grepl("police",Delays$Incident) |
grepl("emergency",Delays$Incident) | grepl("MTPD",Delays$Incident) | grepl("burning",Delays$Incident) |
grepl("smolder",Delays$Incident) | grepl("unattended package",Delays$Incident) |
grepl("suspicious package",Delays$Incident)),"FireCrime",
ifelse((grepl("medical",Delays$Incident) | grepl("sick",Delays$Incident) | grepl("unauthorized person",Delays$Incident) |
grepl("passenger interfering",Delays$Incident) | grepl("deer",Delays$Incident) | grepl("weather",Delays$Incident)|
grepl("Presidential",Delays$Incident)| grepl("slippery",Delays$Incident) | grepl("person struck",Delays$Incident) |
grepl("passenger struck",Delays$Incident) | grepl("obstruction",Delays$Incident) | grepl("customer",Delays$Incident) |
grepl("assist a passenger",Delays$Incident) | grepl("assisting a passenger",Delays$Incident) |
grepl("passenger falling",Delays$Incident) | grepl("child",Delays$Incident) | grepl("bird",Delays$Incident) |
grepl("dog",Delays$Incident)),"External",
ifelse(grepl("did not operate",Delays$Incident) | grepl("schedule",Delays$Incident),"Schedule",
"NA")))))))
Delays$ShortInc<-substr(Delays$Incident,11,1000)
Delays$ShortInc<-gsub('minute.*','',Delays$ShortInc)
Delays$ShortInc<-gsub(".*\\.m.","",Delays$ShortInc)
Delays$Delay<-as.numeric(str_extract(Delays$ShortInc,"[[:digit:]]+"))
offload<-subset(Delays,Delays$Offload==1 & !is.na(Delays$Delay))
median(offload$Delay)
Delays$Delay<-ifelse((is.na(Delays$Delay)& Delays$Offload==1),8,
ifelse((is.na(Delays$Delay)& Delays$Suspend==1),40,
ifelse((is.na(Delays$Delay)& Delays$Shuttle==1),40,
ifelse((is.na(Delays$Delay)& Delays$SingleTrack==1),20,
ifelse((is.na(Delays$Delay)& grepl("ignificant delay",Delays$Incident)),40,
ifelse((is.na(Delays$Delay)& grepl("delay",Delays$Incident)),8,
Delays$Delay))))))
Delays$Silver<-ifelse(grepl("Silver",Delays$Incident),1,0)
Delays$Orange<-ifelse(grepl("Orange",Delays$Incident),1,0)
Delays$Blue<-ifelse(grepl("Blue",Delays$Incident),1,0)
Delays$Red<-ifelse(grepl("Red",Delays$Incident),1,0)
Delays$Yellow<-ifelse(grepl("Yellow",Delays$Incident),1,0)
Delays$Green<-ifelse(grepl("Green",Delays$Incident),1,0)
Delays$Bound<-ifelse(grepl("Largo Town Center-bound",Delays$Incident),"Largo",
ifelse(grepl("Largo-bound",Delays$Incident),"Largo",
ifelse(grepl("New Carrollton-bound",Delays$Incident),"New Carrollton",
ifelse(grepl("New Carrolton-bound",Delays$Incident),"New Carrollton",
ifelse(grepl("Greenbelt-bound",Delays$Incident),"Greenbelt",
ifelse(grepl("Glenmont-bound",Delays$Incident),"Glenmont",
ifelse(grepl("Shady Grove-bound",Delays$Incident),"Shady Grove",
ifelse(grepl("Shady Grove- bound",Delays$Incident),"Shady Grove",
ifelse(grepl("Wiehle-Reston East-bound",Delays$Incident),"Wiehle-Reston East",
ifelse(grepl("Vienna-bound",Delays$Incident),"Vienna",
ifelse(grepl("Franconia-Springfield-bound",Delays$Incident),"Franconia-Springfield",
ifelse(grepl("Branch Avenue-bound",Delays$Incident),"Branch Avenue",
ifelse(grepl("Branch Ave-bound",Delays$Incident),"Branch Avenue",
ifelse(grepl("Huntington-bound",Delays$Incident),"Huntington",
ifelse(grepl("Grosvenor-Strathmore-bound",Delays$Incident),"Grosvenor-Strathmore",
ifelse(grepl("Grosvenor-bound",Delays$Incident),"Grosvenor-Strathmore",
ifelse(grepl("Mt. Vernon Square-bound",Delays$Incident),"Mt. Vernon Square",
ifelse(grepl("Mt. Vernon-bound",Delays$Incident),"Mt. Vernon Square",
ifelse(grepl("Mt. Vernon Sq-bound",Delays$Incident),"Mt. Vernon Square",
ifelse(grepl("Silver Spring-bound",Delays$Incident),"Silver Spring",
ifelse(grepl("Fort Totten-bound",Delays$Incident),"Fort Totten",
ifelse(grepl("Ft Totten-bound",Delays$Incident),"Fort Totten",
ifelse(grepl("Ft. Totten-bound",Delays$Incident),"Fort Totten",
ifelse(grepl("NoMa-Gallaudet-bound",Delays$Incident),"NoMa-Gallaudet",
ifelse(grepl("Medical Center-bound",Delays$Incident),"Medical Center",
ifelse(grepl("Friendship Heights-bound",Delays$Incident),"Friendship Height",
ifelse(grepl("Van Dorn Street-bound",Delays$Incident),"Van Dorn Street",
ifelse(grepl("Judiciary Square-bound",Delays$Incident),"Judiciary Square",
ifelse(grepl("Grosvenor -bound",Delays$Incident),"Grosvenor-Strathmore",
ifelse(grepl("Branch Ave -bound",Delays$Incident),"Branch Avenue",
ifelse(grepl("Greenbelt Ave-bound",Delays$Incident),"Greenbelt Avenue",
ifelse(grepl("Van Ness-bound",Delays$Incident),"Van Ness",
"N/A"))))))))))))))))))))))))))))))))
aggregate(Delays$Delay, by=list(Delays$Yr), FUN=sum, na.rm=TRUE)
count(Delays$Delay, c('Delays$Yr'))
DelayTime<-subset(Delays,!is.na(Delays$Delay))
count(DelayTime$Delay, c('DelayTime$Yr'))
table(DelayTime$Issue,DelayTime$Yr)
Schedule15<-subset(DelayTime,DelayTime$Issue=="Schedule" & DelayTime$Yr=="2015")
View(Schedule15)
DelayTime$DNO<-ifelse(grepl("did not operate",DelayTime$Incident,1,0))
DelayTime$DNO<-ifelse(grepl("did not operate",DelayTime$Incident),1,0)
table(DelayTime$DNO,DelayTime$Yr)
library(stringr)
library(plyr)
DelayRaw<-read.csv("/Users/katerabinowitz/Documents/DataLensDC/WMATA-Delay/Wmata-Delay/WMATAService.csv",
stringsAsFactors=FALSE, strip.white=TRUE)
DelayRaw<-subset(DelayRaw,grepl('[a-z]',DelayRaw$Incident) & !(grepl('Report Archives',DelayRaw$Incident)))
DelayRaw$LongDay<-gsub("Daily Service Report for ", "",DelayRaw$Date)
Date<-as.data.frame(strsplit(DelayRaw$LongDay,", "))
Date<-as.data.frame(t(Date))
colnames(Date)<-c("Day","MD","Yr")
Delays<-cbind(DelayRaw,Date)
Delays<-subset(Delays,Delays$Incident!="Wednesday November 18, 2014    ")
Delays$DayType<-ifelse(Delays$Day %in% c("Saturday","Sunday"), "Weekend","Weekday")
Delays$Month<-gsub( " .*$", "", Delays$MD)
Delays$Time<-substr(Delays$Incident,1,10)
Delays$Hour<-ifelse(Delays$Time=="\n5 57 p.m.",5,
ifelse(Delays$Time=="\n* 5:00 p.",5,
ifelse(Delays$Time=="\n803 a.m. ",8,
as.numeric(gsub(":.*$","",Delays$Time)))))
Delays<-subset(Delays,!is.na(Delays$Hour) & !(Delays$Month=="December"))
Delays$Hour24<-ifelse((grepl("p",Delays$Time) & Delays$Hour==12),Delays$Hour,
ifelse(grepl("p",Delays$Time),Delays$Hour+12,Delays$Hour))
Delays$TimeGroup<-ifelse(Delays$DayType=="Weekday" & Delays$Hour24 %in% c(6,7,8,9),"Rush",
ifelse(Delays$DayType=="Weekday" & Delays$Hour24 %in% c(16,17,18,19),"Rush",
"Off Rush"))
Delays<-Delays[c(3,5:9,11:12)]
Delays$Suspend<-ifelse(grepl("suspend",Delays$Incident),1,
ifelse(grepl("Suspend",Delays$Incident),1,0))
Delays$Closed<-ifelse(grepl("close",Delays$Incident),1,
ifelse(grepl("Close",Delays$Incident),1,0))
Delays$Offload<-ifelse(grepl("offload",Delays$Incident),1,
ifelse(grepl("Offload",Delays$Incident),1,0))
Delays$Shuttle<-ifelse(grepl("Shuttle",Delays$Incident),1,
ifelse(grepl("shuttle",Delays$Incident),1,0))
Delays$SingleTrack<-ifelse(grepl("ingle",Delays$Incident),1,0)
Delays$Express<-ifelse(grepl("xpress",Delays$Incident),1,0)
Delays$Reroute<-ifelse(grepl("eroute",Delays$Incident),1,
ifelse(grepl("changed to", Delays$Incident),1,0))
Delays$Issue<-ifelse(grepl("perational problem",Delays$Incident),"Operational",
ifelse((grepl("maintenance",Delays$Incident) | grepl("unscheduled track work",Delays$Incident) | grepl("late",Delays$Incident) |
grepl("disabled work unit",Delays$Incident)),"Maintenance",
ifelse((grepl("signal problem",Delays$Incident) | grepl("door problem",Delays$Incident) | grepl("equipment problem",Delays$Incident) |
grepl("brake problem",Delays$Incident) | grepl("break problem",Delays$Incident)| grepl("track problem",Delays$Incident) |
grepl("power problem",Delays$Incident) | grepl("switch problem",Delays$Incident) | grepl("mechanical problem",Delays$Incident) |
grepl("escalator",Delays$Incident) | grepl("elevator",Delays$Incident) | grepl("cracked rail",Delays$Incident) |
grepl("cracked third",Delays$Incident)),"Mechnical",
ifelse((grepl("disabled No",Delays$Incident) | grepl("disabled no",Delays$Incident) | grepl("derail",Delays$Incident)),"Trains",
ifelse((grepl("fire",Delays$Incident) | grepl("smoke",Delays$Incident) | grepl("police",Delays$Incident) |
grepl("emergency",Delays$Incident) | grepl("MTPD",Delays$Incident) | grepl("burning",Delays$Incident) |
grepl("smolder",Delays$Incident) | grepl("unattended package",Delays$Incident) |
grepl("suspicious package",Delays$Incident)),"FireCrime",
ifelse((grepl("medical",Delays$Incident) | grepl("sick",Delays$Incident) | grepl("unauthorized person",Delays$Incident) |
grepl("passenger interfering",Delays$Incident) | grepl("deer",Delays$Incident) | grepl("weather",Delays$Incident)|
grepl("Presidential",Delays$Incident)| grepl("slippery",Delays$Incident) | grepl("person struck",Delays$Incident) |
grepl("passenger struck",Delays$Incident) | grepl("obstruction",Delays$Incident) | grepl("customer",Delays$Incident) |
grepl("assist a passenger",Delays$Incident) | grepl("assisting a passenger",Delays$Incident) |
grepl("passenger falling",Delays$Incident) | grepl("child",Delays$Incident) | grepl("bird",Delays$Incident) |
grepl("dog",Delays$Incident)),"External",
ifelse(grepl("did not operate",Delays$Incident) | grepl("schedule",Delays$Incident),"Schedule",
"NA")))))))
###Delay Time###
Delays$ShortInc<-substr(Delays$Incident,11,1000)
Delays$ShortInc<-gsub('minute.*','',Delays$ShortInc)
Delays$ShortInc<-gsub(".*\\.m.","",Delays$ShortInc)
Delays$Delay<-as.numeric(str_extract(Delays$ShortInc,"[[:digit:]]+"))
#where no delay time reported, estimate based on type of incident
Delays$Delay<-ifelse((is.na(Delays$Delay)& Delays$Offload==1),8,
ifelse((is.na(Delays$Delay)& Delays$Suspend==1),40,
ifelse((is.na(Delays$Delay)& Delays$Shuttle==1),40,
ifelse((is.na(Delays$Delay)& Delays$SingleTrack==1),20,
ifelse((is.na(Delays$Delay)& grepl("ignificant delay",Delays$Incident)),40,
ifelse((is.na(Delays$Delay)& grepl("delay",Delays$Incident)),8,
Delays$Delay))))))
AnnualDelay<-aggregate(Delays$Delay, by=list(Delays$Yr), FUN=sum, na.rm=TRUE)
View(AnnualDelay)
DelayIssue<-table(DelayTime$Issue,DelayTime$Yr)
DelayTime<-subset(Delays,!is.na(Delays$Delay))
count(DelayTime$Delay, c('DelayTime$Yr'))
DelayIssue<-table(DelayTime$Issue,DelayTime$Yr)
DelayIssue<-as.data.frame(table(DelayTime$Issue,DelayTime$Yr))
View(DelayIssue)
Delays<-cbind(DelayRaw,Date)
Delays<-subset(Delays,Delays$Incident!="Wednesday November 18, 2014    ")
Delays$DayType<-ifelse(Delays$Day %in% c("Saturday","Sunday"), "Weekend","Weekday")
Delays$Month<-gsub( " .*$", "", Delays$MD)
Delays$Time<-substr(Delays$Incident,1,10)
Delays$Hour<-ifelse(Delays$Time=="\n5 57 p.m.",5,
ifelse(Delays$Time=="\n* 5:00 p.",5,
ifelse(Delays$Time=="\n803 a.m. ",8,
as.numeric(gsub(":.*$","",Delays$Time)))))
Delays<-subset(Delays,!is.na(Delays$Hour) & !(Delays$Month=="December") & !(Delays$Yr=="2012"))
Delays$Hour24<-ifelse((grepl("p",Delays$Time) & Delays$Hour==12),Delays$Hour,
ifelse(grepl("p",Delays$Time),Delays$Hour+12,Delays$Hour))
Delays$TimeGroup<-ifelse(Delays$DayType=="Weekday" & Delays$Hour24 %in% c(6,7,8,9),"Rush",
ifelse(Delays$DayType=="Weekday" & Delays$Hour24 %in% c(16,17,18,19),"Rush",
"Off Rush"))
Delays<-Delays[c(3,5:9,11:12)]
### Incident Type ###
#Outcome
Delays$Suspend<-ifelse(grepl("suspend",Delays$Incident),1,
ifelse(grepl("Suspend",Delays$Incident),1,0))
Delays$Closed<-ifelse(grepl("close",Delays$Incident),1,
ifelse(grepl("Close",Delays$Incident),1,0))
Delays$Offload<-ifelse(grepl("offload",Delays$Incident),1,
ifelse(grepl("Offload",Delays$Incident),1,0))
Delays$Shuttle<-ifelse(grepl("Shuttle",Delays$Incident),1,
ifelse(grepl("shuttle",Delays$Incident),1,0))
Delays$SingleTrack<-ifelse(grepl("ingle",Delays$Incident),1,0)
Delays$Express<-ifelse(grepl("xpress",Delays$Incident),1,0)
Delays$Reroute<-ifelse(grepl("eroute",Delays$Incident),1,
ifelse(grepl("changed to", Delays$Incident),1,0))
Delays$Issue<-ifelse(grepl("perational problem",Delays$Incident),"Operational",
ifelse((grepl("maintenance",Delays$Incident) | grepl("unscheduled track work",Delays$Incident) | grepl("late",Delays$Incident) |
grepl("disabled work unit",Delays$Incident)),"Maintenance",
ifelse((grepl("signal problem",Delays$Incident) | grepl("door problem",Delays$Incident) | grepl("equipment problem",Delays$Incident) |
grepl("brake problem",Delays$Incident) | grepl("break problem",Delays$Incident)| grepl("track problem",Delays$Incident) |
grepl("power problem",Delays$Incident) | grepl("switch problem",Delays$Incident) | grepl("mechanical problem",Delays$Incident) |
grepl("escalator",Delays$Incident) | grepl("elevator",Delays$Incident) | grepl("cracked rail",Delays$Incident) |
grepl("cracked third",Delays$Incident)),"Mechnical",
ifelse((grepl("disabled No",Delays$Incident) | grepl("disabled no",Delays$Incident) | grepl("derail",Delays$Incident)),"Trains",
ifelse((grepl("fire",Delays$Incident) | grepl("smoke",Delays$Incident) | grepl("police",Delays$Incident) |
grepl("emergency",Delays$Incident) | grepl("MTPD",Delays$Incident) | grepl("burning",Delays$Incident) |
grepl("smolder",Delays$Incident) | grepl("unattended package",Delays$Incident) |
grepl("suspicious package",Delays$Incident)),"FireCrime",
ifelse((grepl("medical",Delays$Incident) | grepl("sick",Delays$Incident) | grepl("unauthorized person",Delays$Incident) |
grepl("passenger interfering",Delays$Incident) | grepl("deer",Delays$Incident) | grepl("weather",Delays$Incident)|
grepl("Presidential",Delays$Incident)| grepl("slippery",Delays$Incident) | grepl("person struck",Delays$Incident) |
grepl("passenger struck",Delays$Incident) | grepl("obstruction",Delays$Incident) | grepl("customer",Delays$Incident) |
grepl("assist a passenger",Delays$Incident) | grepl("assisting a passenger",Delays$Incident) |
grepl("passenger falling",Delays$Incident) | grepl("child",Delays$Incident) | grepl("bird",Delays$Incident) |
grepl("dog",Delays$Incident)),"External",
ifelse(grepl("did not operate",Delays$Incident) | grepl("schedule",Delays$Incident),"Schedule",
"NA")))))))
###Delay Time###
Delays$ShortInc<-substr(Delays$Incident,11,1000)
Delays$ShortInc<-gsub('minute.*','',Delays$ShortInc)
Delays$ShortInc<-gsub(".*\\.m.","",Delays$ShortInc)
Delays$Delay<-as.numeric(str_extract(Delays$ShortInc,"[[:digit:]]+"))
Delays$Delay<-ifelse((is.na(Delays$Delay)& Delays$Offload==1),8,
ifelse((is.na(Delays$Delay)& Delays$Suspend==1),40,
ifelse((is.na(Delays$Delay)& Delays$Shuttle==1),40,
ifelse((is.na(Delays$Delay)& Delays$SingleTrack==1),20,
ifelse((is.na(Delays$Delay)& grepl("ignificant delay",Delays$Incident)),40,
ifelse((is.na(Delays$Delay)& grepl("delay",Delays$Incident)),8,
Delays$Delay))))))
AnnualDelay<-aggregate(Delays$Delay, by=list(Delays$Yr), FUN=sum, na.rm=TRUE)
count(Delays$Delay, c('Delays$Yr'))
AnnualDelay<-aggregate(Delays$Delay, by=list(Delays$Yr), FUN=sum, na.rm=TRUE)
View(AnnualDelay)
DelayTime<-subset(Delays,!is.na(Delays$Delay))
count(DelayTime$Delay, c('DelayTime$Yr'))
DelayIssue<-as.data.frame(table(DelayTime$Issue,DelayTime$Yr))
View(DelayIssue)
DelayTime<-subset(Delays,!is.na(Delays$Delay))
DelayIssue<-as.data.frame(table(DelayTime$Issue,DelayTime$Yr))
View(Delays)
Delays$Yr
table(Delays$Yr)
View(DelayIssue)
aggregate(Delays$Delay, by=list(Delays$Yr,Delays$Month), FUN=sum, na.rm=TRUE)
count(Delays$Delay, c('Delays$Month','Delays$Yr'))
myDelayN<-count(Delays$Delay, c('Delays$Month','Delays$Yr'))
View(DelayIssue)
Train<-subset(Delays,Delays$Issue=="Mechnical-Train")
Train<-subset(Delays,Delays$Issue=="Mechnical-Train")
View(Delays)
Delays$Issue<-ifelse(grepl("perational problem",Delays$Incident),"Operational",
ifelse((grepl("aintenance",Delays$Incident) | grepl("unscheduled track work",Delays$Incident) | grepl("late",Delays$Incident) |
grepl("disabled work unit",Delays$Incident) | grepl("ingle tracking",Delays$Incident)),"Maintenance",
ifelse((grepl("signal",Delays$Incident)|grepl("switch problem",Delays$Incident) |
grepl("escalator",Delays$Incident)|grepl("elevator",Delays$Incident)|grepl("station overrun",Delays$Incident)
|grepl("crowded",Delays$Incident)),"Mechnical-Station",
ifelse((grepl("track problem",Delays$Incident)|grepl("cracked rail",Delays$Incident)|grepl("cracked third",Delays$Incident)
|grepl("insulator",Delays$Incident)|grepl("disabled track equipment",Delays$Incident) | grepl("3rd rail",Delays$Incident)
| grepl("moving track equipment",Delays$Incident)),"Mechnical-Track",
ifelse((grepl("equipment problem",Delays$Incident) | grepl("power problem",Delays$Incident) |
grepl("mechanical problem",Delays$Incident)),"Mechnical-General",
ifelse((grepl("disabled No",Delays$Incident) | grepl("disabled no",Delays$Incident) | grepl("derail",Delays$Incident)
| grepl("door problem",Delays$Incident) | grepl("brake problem",Delays$Incident) | grepl("break problem",Delays$Incident)
| grepl("disabled train",Delays$Incident) | grepl("disabled Green",Delays$Incident)),"Mechnical-Train",
ifelse((grepl("fire",Delays$Incident) | grepl("smoke",Delays$Incident) | grepl("police",Delays$Incident) |
grepl("emergency",Delays$Incident) | grepl("MTPD",Delays$Incident) | grepl("burning",Delays$Incident) |
grepl("smolder",Delays$Incident) | grepl("unattended package",Delays$Incident) | grepl("unattended bag",Delays$Incident) |
grepl("suspicious package",Delays$Incident)),"FireCrime",
ifelse((grepl("medical",Delays$Incident) | grepl("sick",Delays$Incident) | grepl("unauthorized person",Delays$Incident) |
grepl("passenger interfering",Delays$Incident) | grepl("deer",Delays$Incident) | grepl("weather",Delays$Incident)|
grepl("Presidential",Delays$Incident)| grepl("slippery",Delays$Incident) | grepl("person struck",Delays$Incident) |
grepl("passenger struck",Delays$Incident) | grepl("obstruction",Delays$Incident) | grepl("customer",Delays$Incident) |
grepl("assist a passenger",Delays$Incident) | grepl("assisting a passenger",Delays$Incident) |
grepl("passenger falling",Delays$Incident) | grepl("child",Delays$Incident) | grepl("bird",Delays$Incident) |
grepl("holding the doors",Delays$Incident)|grepl("dog",Delays$Incident)|grepl("basketball",Delays$Incident)
| grepl("passenger incident",Delays$Incident) | grepl("tree",Delays$Incident)),"External",
ifelse(grepl("id not operate",Delays$Incident),"Train did not operate",
ifelse((grepl("chedule",Delays$Incident) | grepl("eroute",Delays$Incident)),"Schedule Adherence",
"NA"))))))))))
Train<-subset(Delays,Delays$Issue=="Mechnical-Train")
View(Train)
ABRA12015<-read.csv('/Users/katerabinowitz/Documents/DataLensDC/ABRALicense1262015.csv',na.strings=c("", "NA"),
strip.white=TRUE,header=FALSE, stringsAsFactors=FALSE,
col.names=c("License","Status","Applicant","Name","Desc","Class","StreetNo","Street","StreetType","Quad"))
ABUnq<-ABRA12015[!duplicated(ABRA12015[,1:9]),]
View(ABUnq)
ABUnq2<-ABUnq[!duplicated(ABUnq),]
ABRA12015<-read.csv('/Users/katerabinowitz/Documents/DataLensDC/ABRALicense1262015.csv',na.strings=c("", "NA"),
strip.white=TRUE,header=FALSE, stringsAsFactors=FALSE,
col.names=c("License","Status","Applicant","Name","Desc","Class","StreetNo","Street","StreetType","Quad"))
ABRA12015<-ABRA12015[!duplicated(ABRA12015[,1:9]),]
ABRA72015<-read.csv('/Users/katerabinowitz/Documents/DataLensDC/ABRAlicense772015.csv',na.strings=c("", "NA"),
strip.white=TRUE,header=FALSE, stringsAsFactors=FALSE,
col.names=c("License","Status","Applicant","Name","Desc","Class","StreetNo","Street","StreetType","Quad"))
ABRA72015<-ABRA72015[!duplicated(ABRA72015[,1:9]),]
dup<-ABRA72015[duplicated(ABRA72015[,1:9]),]
ABRA72015<-read.csv('/Users/katerabinowitz/Documents/DataLensDC/ABRAlicense772015.csv',na.strings=c("", "NA"),
strip.white=TRUE,header=FALSE, stringsAsFactors=FALSE,
col.names=c("License","Status","Applicant","Name","Desc","Class","StreetNo","Street","StreetType","Quad"))
dup<-ABRA72015[duplicated(ABRA72015[,1:9]),]
View(dup)
dup<-ABRA12015[duplicated(ABRA12015[,1:9]),]
ABRA12015<-read.csv('/Users/katerabinowitz/Documents/DataLensDC/ABRALicense1262015.csv',na.strings=c("", "NA"),
strip.white=TRUE,header=FALSE, stringsAsFactors=FALSE,
col.names=c("License","Status","Applicant","Name","Desc","Class","StreetNo","Street","StreetType","Quad"))
dup<-ABRA12015[duplicated(ABRA12015[,1:9]),]
View(dup)
ABRA12015<-ABRA12015[!duplicated(ABRA12015[,1:9]),]
ABRA72015<-ABRA72015[!duplicated(ABRA72015[,1:9]),]
ABRA12015$Report<-rep("Jan2015",1809)
ABRA72015$Report<-rep("July2015",1814)
ABRA<-rbind(ABRA12015,ABRA72015)
Unq<-ABRA[!duplicated(ABRA[,1:10]),]
View(Unq)
ABRA<-rbind(ABRA12015,ABRA72015)
Unq<-ABRA[!duplicated(ABRA[,1:10]),]
Unq<-ABRA[!duplicated(ABRA[,1:11]),]
View(Unq)
View(ABRA72015)
View(ABRA12015)
View(ABRA72015)
View(ABRA)
ABRA$License<-gsub(" ", "", ABRA$License, fixed = TRUE)
Unq<-ABRA[!duplicated(ABRA[,1:11]),]
Unq<-ABRA[!duplicated(ABRA[,1]),]
ABRA72015$License<-gsub(" ", "", ABRA72015$License, fixed = TRUE)
View(ABRA72015)
ABRA72015[1:10]
View(ABRA72015)
ABRA72015[c(1:10)]
ABRA72015[(1:10),]
ABRA72015$License<-gsub("\n", "", ABRA72015$License, fixed = TRUE)
View(ABRA72015)
ABRA<-rbind(ABRA12015,ABRA72015)
Unq<-ABRA[!duplicated(ABRA[,1]),]
View(Unq)
Opens<-subset(ABRA72015,!(ABRA72015$License %in% ABRA72015$License))
Opens<-subset(ABRA72015,!(ABRA72015$License %in% ABRA12015$License))
View(Opens)
ted<-subset(ABRA12015,ABRA12015$Name=="Ted's Bulletin")
ted<-subset(ABRA12015,ABRA12015$Name=="Serendipity")
ted<-subset(ABRA12015,ABRA12015$Name=="Toscana Cafe")
View(ted)
ted<-subset(ABRA12015,grepl("Ted",ABRA12015$Name))
ted<-subset(ABRA12015,grepl("ted",ABRA12015$Name))
View(ted)
ted<-subset(ABRA12015,grepl("bull",ABRA12015$Name))
ted<-subset(ABRA12015,grepl("Bull",ABRA12015$Name))
View(ted)
ted<-subset(ABRA12015,grepl("Ted's",ABRA12015$Name))
ted<-subset(ABRA12015,grepl("Ted",ABRA12015$Name))
View(ABRA12015)
table(ABRA$Desc)
Nightlife<-subset(ABRA12015,ABRA12015$Desc=="Restaurant" | ABRA12015$Desc=="Tavern" | ABRA12015$Desc=="Nightclub")
View(Nightlife)
Nightlife<-subset(ABRA12015,ABRA12015$Desc=="Restaurant" | ABRA12015$Desc=="Tavern" | ABRA12015$Desc=="Nightclub")
View(Nightlife)
View(Opens)
ted<-subset(ABRA12015,ABRA12015$StreetNo=="1818" & ABRA12015$Street=="14TH")
ted<-subset(ABRA12015,ABRA12015$Street=="14TH")
View(ted)
ted<-subset(ABRA12015,ABRA12015$Street=="7TH" & ABRA12015$Quad=="SE")
View(ted)
APIkey="d1821ae426f612d20726552ceb03421962124ffd"
fieldnm="B12002_183M"
county="001"
state="11"
resURL=paste("http://api.census.gov/data/2014/acs5?get=",fieldnm,
"&for=county:",county,"&in=state:",state,"&key=",
APIkey,sep="")
dfJSON=fromJSON(resURL)
install.packages("RJSONIO")
library(RJSONIO)
resURL=paste("http://api.census.gov/data/2014/acs5?get=",fieldnm,
"&for=county:",county,"&in=state:",state,"&key=",
APIkey,sep="")
dfJSON=fromJSON(resURL)
dfJSON
dfJSON=dfJSON[2:length(dfJSON)]
dfJSON_zip=sapply(dfJSON,function(x) x[3])
dfJSON_val=sapply(dfJSON,function(x) x[1])
df=data.frame(dfJSON_zip,as.numeric(dfJSON_val))
names(df)=c("zip","val")
View(df)
DF$value<-fieldnm
df$value<-fieldnm
View(df)
dfJSON=fromJSON(resURL)
dfJSON=dfJSON[2:length(dfJSON)]
dfJSON_zip=sapply(dfJSON,function(x) x[3])
dfJSON_county=sapply(dfJSON,function(x) x[2])
dfJSON_val=sapply(dfJSON,function(x) x[1])
df=data.frame(dfJSON_zip,dfJSON_county,as.numeric(dfJSON_val))
names(df)=c("state","county","val")
return(df)
View(df)
resURL=paste("http://api.census.gov/data/2014/acs5?get=",fieldnm,
"&for=county:",county,"&in=state:",state,"&key=",
APIkey,sep="")
dfJSON=fromJSON(resURL)
resURL=paste("http://api.census.gov/data/2014/acs5?get=",fieldnm,
"&for=county:",county,"&in=state:",state,"&key=",
APIkey,sep="")
dfJSON=fromJSON(resURL)
dfJSON=dfJSON[2:length(dfJSON)]
dfJSON_county=sapply(dfJSON,function(x) x[3])
dfJSON_state=sapply(dfJSON,function(x) x[2])
dfJSON_val=sapply(dfJSON,function(x) x[1])
df=data.frame(dfJSON_state,dfJSON_county,as.numeric(dfJSON_val))
names(df)=c("state","county","val")
View(df)
library(RJSONIO)
APIkey="d1821ae426f612d20726552ceb03421962124ffd"
fieldnm="B12002_183M"
county="001"
state="11"
getCensusData=function(APIkey,state,county,fieldnm){
resURL=paste("http://api.census.gov/data/2014/acs5?get=",fieldnm,
"&for=county:",county,"&in=state:",state,"&key=",
APIkey,sep="")
dfJSON=fromJSON(resURL)
dfJSON=dfJSON[2:length(dfJSON)]
dfJSON_county=sapply(dfJSON,function(x) x[3])
dfJSON_state=sapply(dfJSON,function(x) x[2])
dfJSON_val=sapply(dfJSON,function(x) x[1])
df=data.frame(dfJSON_state,dfJSON_county,as.numeric(dfJSON_val))
names(df)=c("state","county","val")
return(df)
}
View(df)
setwd("https://github.com/codefordc/school-modernization/tree/master/InputData")
brew<-read.csv("https://github.com/codefordc/school-modernization/tree/master/InputData/2014MP_Appendix.B_Public.Charter.Facility.Data.Sheet.csv",stringsAsFactors=FALSE, strip.white=TRUE)
data<-read.csv("https://github.com/codefordc/school-modernization/tree/master/InputData/2014MP_Appendix.B_Public.Charter.Facility.Data.Sheet.csv",stringsAsFactors=FALSE, strip.white=TRUE)
View(data)
setwd("/Users/katerabinowitz/Documents/CodeforDC/school-modernization/InputData")
data<-read.csv("2014MP_Appendix.B_Public.Charter.Facility.Data.Sheet.csv",stringsAsFactors=FALSE, strip.white=TRUE)
View(data)
appB<-read.csv("2014MP_Appendix.B_Public.Charter.Facility.Data.Sheet.csv",stringsAsFactors=FALSE, strip.white=TRUE)
atRisk<-read.csv("At risk_DCPS_FY15_Ext.csv",stringsAsFactors=FALSE, strip.white=TRUE)
charterCap<-read.csv("Charter capacities-Table 1.csv",stringsAsFactors=FALSE, strip.white=TRUE)
dcpsBuild<-read.csv"DCPS Building Condition Dat (2-Table 1.csv",stringsAsFactors=FALSE, strip.white=TRUE)
View(atRisk)
View(charterCap)
